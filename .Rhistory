url <- "https://zh-yue.wikipedia.org/wiki/%E9%A6%99%E6%B8%AF%E5%95%86%E5%A0%B4%E4%B8%80%E8%A6%BD"
# 讀取網頁內容
webpage <- read_html(url)
# 提取所有表格，篩選 class 為 "sortable wikitable jquery-tablesorter" 的表格
tables <- webpage %>%
html_elements("table.sortable.wikitable.jquery-tablesorter")
# 將每個表格轉換為數據框
all_tables <- lapply(tables, function(table) {
html_table(table, fill = TRUE)
})
# 合併所有表格成一個總數據框
all_shopping_malls <- bind_rows(all_tables)
# 查看結果
print(all_shopping_malls)
# 儲存為 CSV 文件
write.csv(all_shopping_malls, "hong_kong_shopping_malls.csv", row.names = FALSE)
# 加載必要的套件
library(dplyr)
# 定義所有 CSV 文件的路徑
csv_files <- c("mall_island.csv", "mall_kc.csv", "mall_sk.csv",
"mall_st.csv", "mall_tm.csv", "mall_tp.csv",
"mall_tw.csv", "mall_yl.csv")
# 初始化結果列表
file_row_counts <- list()
# 遍歷所有文件，計算每個文件的行數
for (file in csv_files) {
# 讀取 CSV 文件，但不讀取第一行
data <- read.csv(file, skip = 1)
# 計算行數
file_row_counts[[file]] <- nrow(data)
}
# 加載必要的套件
library(dplyr)
# 定義所有 CSV 文件的路徑
csv_files <- c("mall_island.csv", "mall_kc.csv", "mall_sk.csv",
"mall_st.csv", "mall_tm.csv", "mall_tp.csv",
"mall_tw.csv", "mall_yl.csv")
# 初始化結果列表
file_row_counts <- list()
# 遍歷所有文件，計算每個文件的行數
for (file in csv_files) {
# 讀取 CSV 文件，但不讀取第一行
data <- read.csv(file, skip = 1)
# 計算行數
file_row_counts[[file]] <- nrow(data)
}
# 查看每個文件的行數
print("每個文件的行數（不包括第一行）：")
print(file_row_counts)
# 加載必要的套件
library(ggplot2)
# 原始數據
mall_data <- data.frame(
Region = c("離島", "葵涌", "西貢", "沙田", "屯門", "大埔", "荃灣", "元朗"),
Malls = c(19, 40, 60, 60, 48, 59, 48, 53)
)
# 將地區分組為新界東和新界西
mall_data$Group <- ifelse(
mall_data$Region %in% c("西貢", "沙田", "大埔"), "新界東", "新界西"
)
# 按分組計算商場總數
grouped_data <- mall_data %>%
group_by(Group) %>%
summarise(Total_Malls = sum(Malls))
# 查看分組結果
print(grouped_data)
# 繪製柱狀圖
ggplot(grouped_data, aes(x = Group, y = Total_Malls, fill = Group)) +
geom_bar(stat = "identity", width = 0.6) +
labs(
title = "新界東與新界西的商場數量",
x = "地區分組",
y = "商場總數"
) +
theme_minimal() +
scale_fill_manual(values = c("新界東" = "#1f78b4", "新界西" = "#33a02c"))
# 安裝必要的套件（如果尚未安裝）
if (!require("rvest")) install.packages("rvest")
if (!require("dplyr")) install.packages("dplyr")
# 載入套件
library(rvest)
library(dplyr)
# 指定目標 URL
url <- "https://hkbus.fandom.com/wiki/%E6%96%B0%E7%95%8C%E5%B0%88%E7%87%9F%E5%B7%B4%E5%A3%AB%E8%B7%AF%E7%B7%9A%E5%88%97%E8%A1%A8/%E9%9B%99%E4%BD%8D%E6%95%B8/%E6%96%B0%E7%95%8C%E8%A5%BF"
# 讀取網頁內容
webpage <- read_html(url)
# 找到目標表格 (使用 <table border="1"> 標籤)
# 根據 HTML 結構，這裡會提取第一個符合條件的表格
table <- webpage %>%
html_node("table[border='1']") %>% # 找到指定的表格
html_table(fill = TRUE)            # 解析表格內容
# 查看表格內容
print(table)
# 將表格保存為 CSV 文件（可選）
write.csv(table, "new_territories_west_routes.csv", row.names = FALSE)
# 如果需要進一步處理數據，例如清理 NA 或格式化表格，使用 dplyr
cleaned_table <- table %>%
filter(!is.na(第一列名稱)) # 替換 "第一列名稱" 為實際的列名
# 安裝必要的套件
if (!require("rvest")) install.packages("rvest")
if (!require("dplyr")) install.packages("dplyr")
# 載入套件
library(rvest)
library(dplyr)
# 指定目標 URL
url <- "https://hkbus.fandom.com/wiki/%E6%96%B0%E7%95%8C%E5%B0%88%E7%87%9F%E5%B7%B4%E5%A3%AB%E8%B7%AF%E7%B7%9A%E5%88%97%E8%A1%A8/%E9%9B%99%E4%BD%8D%E6%95%B8/%E6%96%B0%E7%95%8C%E8%A5%BF"
# 讀取網頁內容
webpage <- read_html(url)
# 找到目標表格
table <- webpage %>%
html_node("table[border='1']") %>% # 找到指定的表格
html_table(fill = TRUE)            # 解析表格內容
# 修復列名稱
colnames(table) <- make.names(colnames(table), unique = TRUE)
# 移除空列（如果有）
table <- table[, colnames(table) != ""]
table <- table[, !is.na(colnames(table))]
# 移除空行（如果有）
table <- table[complete.cases(table), ]
# 查看清理後的表格
print(table)
# 將表格保存為 CSV 文件（可選）
write.csv(table, "new_territories_west_routes.csv", row.names = FALSE)
# 安裝必要的套件
if (!require("rvest")) install.packages("rvest")
if (!require("dplyr")) install.packages("dplyr")
# 載入套件
library(rvest)
library(dplyr)
# 指定目標 URL
url <- "https://hkbus.fandom.com/wiki/%E6%96%B0%E7%95%8C%E5%B0%88%E7%87%9F%E5%B7%B4%E5%A3%AB%E8%B7%AF%E7%B7%9A%E5%88%97%E8%A1%A8/%E9%9B%99%E4%BD%8D%E6%95%B8/%E6%96%B0%E7%95%8C%E8%A5%BF"
# 讀取網頁內容
webpage <- read_html(url)
# 找到所有的 <tr> 標籤（表格的每一行數據）
rows <- webpage %>%
html_nodes("table[border='1'] tr") # 選擇表格中的所有 <tr>
# 提取數據
data <- rows %>%
html_nodes("td") %>% # 找到每一行中的 <td>
html_text(trim = TRUE) # 提取文字，並去掉多餘的空格
# 將數據轉換為數據框
# 表格中每行有 3 個欄位：路線號、起訖點、全程收費
table <- matrix(data, ncol = 3, byrow = TRUE) %>%
as.data.frame()
# 設定列名稱
colnames(table) <- c("路線號", "起訖點", "全程收費")
# 移除表頭的多餘行（如果提取到表頭，需手動確認數據）
table <- table %>%
filter(路線號 != "路線號") # 過濾掉表頭
# 查看表格內容
print(table)
# 將表格保存為 CSV 文件
write.csv(table, "bus_routes_new_territories_west.csv", row.names = FALSE)
# 安裝必要的套件
if (!require("rvest")) install.packages("rvest")
if (!require("dplyr")) install.packages("dplyr")
# 載入套件
library(rvest)
library(dplyr)
# 指定目標 URL
url <- "https://hkbus.fandom.com/wiki/新界專營巴士路線列表/雙位數/新界東"
# 讀取網頁內容
webpage <- read_html(url)
# 找到所有的 <tr> 標籤（表格的每一行數據）
rows <- webpage %>%
html_nodes("table[border='1'] tr") # 選擇表格中的所有 <tr>
# 提取數據
data <- rows %>%
html_nodes("td") %>% # 找到每一行中的 <td>
html_text(trim = TRUE) # 提取文字，並去掉多餘的空格
# 將數據轉換為數據框
# 表格中每行有 3 個欄位：路線號、起訖點、全程收費
table <- matrix(data, ncol = 3, byrow = TRUE) %>%
as.data.frame()
# 設定列名稱
colnames(table) <- c("路線號", "起訖點", "全程收費")
# 移除表頭的多餘行（如果提取到表頭，需手動確認數據）
table <- table %>%
filter(路線號 != "路線號") # 過濾掉表頭
# 查看表格內容
print(table)
# 將表格保存為 CSV 文件
write.csv(table, "bus_routes_new_territories_west.csv", row.names = FALSE)
# 安裝必要的套件
if (!require("rvest")) install.packages("rvest")
if (!require("dplyr")) install.packages("dplyr")
# 載入套件
library(rvest)
library(dplyr)
# 指定目標 URL
url <- "https://hkbus.fandom.com/wiki/新界專營巴士路線列表/三位數/新界西"
# 讀取網頁內容
webpage <- read_html(url)
# 找到所有的 <tr> 標籤（表格的每一行數據）
rows <- webpage %>%
html_nodes("table[border='1'] tr") # 選擇表格中的所有 <tr>
# 提取數據
data <- rows %>%
html_nodes("td") %>% # 找到每一行中的 <td>
html_text(trim = TRUE) # 提取文字，並去掉多餘的空格
# 將數據轉換為數據框
# 表格中每行有 3 個欄位：路線號、起訖點、全程收費
table <- matrix(data, ncol = 3, byrow = TRUE) %>%
as.data.frame()
# 設定列名稱
colnames(table) <- c("路線號", "起訖點", "全程收費")
# 移除表頭的多餘行（如果提取到表頭，需手動確認數據）
table <- table %>%
filter(路線號 != "路線號") # 過濾掉表頭
# 查看表格內容
print(table)
# 將表格保存為 CSV 文件
write.csv(table, "bus_routes_new_territories_west.csv", row.names = FALSE)
# 安裝必要的套件
if (!require("rvest")) install.packages("rvest")
if (!require("dplyr")) install.packages("dplyr")
# 載入套件
library(rvest)
library(dplyr)
# 指定目標 URL
url <- "https://hkbus.fandom.com/wiki/新界專營巴士路線列表/三位數/新界東"
# 讀取網頁內容
webpage <- read_html(url)
# 找到所有的 <tr> 標籤（表格的每一行數據）
rows <- webpage %>%
html_nodes("table[border='1'] tr") # 選擇表格中的所有 <tr>
# 提取數據
data <- rows %>%
html_nodes("td") %>% # 找到每一行中的 <td>
html_text(trim = TRUE) # 提取文字，並去掉多餘的空格
# 將數據轉換為數據框
# 表格中每行有 3 個欄位：路線號、起訖點、全程收費
table <- matrix(data, ncol = 3, byrow = TRUE) %>%
as.data.frame()
# 設定列名稱
colnames(table) <- c("路線號", "起訖點", "全程收費")
# 移除表頭的多餘行（如果提取到表頭，需手動確認數據）
table <- table %>%
filter(路線號 != "路線號") # 過濾掉表頭
# 查看表格內容
print(table)
# 將表格保存為 CSV 文件
write.csv(table, "bus_routes_new_territories_west.csv", row.names = FALSE)
# 安裝必要的套件
if (!require("rvest")) install.packages("rvest")
if (!require("dplyr")) install.packages("dplyr")
# 載入套件
library(rvest)
library(dplyr)
# 指定目標 URL
url <- "https://hkbus.fandom.com/wiki/%E6%96%B0%E7%95%8C%E5%B0%88%E7%87%9F%E5%B7%B4%E5%A3%AB%E8%B7%AF%E7%B7%9A%E5%88%97%E8%A1%A8/%E9%9B%99%E4%BD%8D%E6%95%B8/%E6%96%B0%E7%95%8C%E8%A5%BF"
# 讀取網頁內容
webpage <- read_html(url)
# 找到所有的 <tr> 標籤（表格的每一行數據）
rows <- webpage %>%
html_nodes("table[border='1'] tr") # 選擇表格中的所有 <tr>
# 提取數據
data <- rows %>%
html_nodes("td") %>% # 找到每一行中的 <td>
html_text(trim = TRUE) # 提取文字，並去掉多餘的空格
# 將數據轉換為數據框
# 表格中每行有 5 個欄位：路線號、營辦商、起訖點、性質、全程收費
table <- matrix(data, ncol = 5, byrow = TRUE) %>%
as.data.frame()
# 設定列名稱
colnames(table) <- c("路線號", "營辦商", "起訖點", "性質", "全程收費")
# 移除表頭的多餘行（如果提取到表頭，需手動確認數據）
table <- table %>%
filter(路線號 != "路線號") # 過濾掉表頭
# 查看表格內容
print(table)
# 將表格保存為 CSV 文件
write.csv(table, "bus_routes_new_territories_west.csv", row.names = FALSE)
# 安裝必要的套件
if (!require("rvest")) install.packages("rvest")
if (!require("dplyr")) install.packages("dplyr")
# 載入套件
library(rvest)
library(dplyr)
# 指定目標 URL
url <- "https://hkbus.fandom.com/wiki/過海隧道專營巴士路線列表"
# 讀取網頁內容
webpage <- read_html(url)
# 找到所有的 <tr> 標籤（表格的每一行數據）
rows <- webpage %>%
html_nodes("table[border='1'] tr") # 選擇表格中的所有 <tr>
# 提取數據
data <- rows %>%
html_nodes("td") %>% # 找到每一行中的 <td>
html_text(trim = TRUE) # 提取文字，並去掉多餘的空格
# 將數據轉換為數據框
# 表格中每行有 5 個欄位：路線號、營辦商、起訖點、性質、全程收費
table <- matrix(data, ncol = 5, byrow = TRUE) %>%
as.data.frame()
# 設定列名稱
colnames(table) <- c("路線號", "營辦商", "起訖點", "性質", "全程收費")
# 移除表頭的多餘行（如果提取到表頭，需手動確認數據）
table <- table %>%
filter(路線號 != "路線號") # 過濾掉表頭
# 查看表格內容
print(table)
# 將表格保存為 CSV 文件
write.csv(table, "bus_routes_new_territories_west.csv", row.names = FALSE)
library(tidytransit)
library(dplyr)
library(lubridate)
# 指定 GTFS 文件路徑
gtfs_path <- "gtfs.zip"
# 加載 GTFS 數據
gtfs_data <- read_gtfs(gtfs_path)
# 查看 GTFS 數據中的表格名稱
names(gtfs_data)
library(tidytransit)
library(dplyr)
library(lubridate)
# 指定 GTFS 文件路徑
gtfs_path <- "gtfs.zip"
# 加載 GTFS 數據
gtfs_data <- read_gtfs(gtfs_path)
# 查看 GTFS 數據中的表格名稱
names(gtfs_data)
# 查看 stop_times 表的結構
head(gtfs_data$stop_times)
# 提取所需字段
stop_times <- gtfs_data$stop_times %>%
select(stop_id, trip_id, arrival_time, stop_sequence)
library(tidytransit)
library(dplyr)
library(lubridate)
# 指定 GTFS 文件路徑
gtfs_path <- "gtfs.zip"
# 加載 GTFS 數據
gtfs_data <- read_gtfs(gtfs_path)
# 查看 GTFS 數據中的表格名稱
names(gtfs_data)
# 查看 stop_times 表的結構
head(gtfs_data$stop_times)
# 提取 stop_times 表中的關鍵字段
stop_times <- gtfs_data$stop_times %>%
select(stop_id, trip_id, arrival_time)  # 提取站點、行程和到達時間字段
# 查看數據結構
head(stop_times)
# 使用 lubridate 轉換到達時間為時間對象
stop_times <- stop_times %>%
mutate(arrival_time = hms(arrival_time))  # 轉換為時間格式
# 查看轉換結果
head(stop_times)
stop_times <- stop_times %>%
arrange(stop_id, arrival_time) %>%  # 按站點和到達時間排序
group_by(stop_id) %>%
mutate(wait_time = as.numeric(difftime(lead(arrival_time), arrival_time, units = "mins"))) %>%
ungroup()
# 查看結果
# 計算每個站點的等待時間
stop_times <- stop_times %>%
arrange(stop_id, arrival_time) %>%  # 按站點和到達時間排序
group_by(stop_id) %>%
mutate(wait_time = as.numeric(difftime(lead(arrival_time), arrival_time, units = "mins"))) %>%
ungroup()
# 查看結果
head(stop_times)
# 指定 GTFS 文件路徑
gtfs_path <- "gtfs.zip"
# 加載 GTFS 數據
gtfs_data <- read_gtfs(gtfs_path)
# 查看 GTFS 數據中的表格名稱
names(gtfs_data)
# 查看 stop_times 表的結構
head(gtfs_data$stop_times)
library(tidytransit)
library(dplyr)
library(lubridate)
# 指定 GTFS 文件路徑
gtfs_path <- "frequency.txt"
# 加載 GTFS 數據
gtfs_data <- read_gtfs(gtfs_path)
library(tidytransit)
library(dplyr)
library(lubridate)
# 指定 GTFS 文件路徑
gtfs_path <- "frequencies.txt"
# 加載 GTFS 數據
gtfs_data <- read_gtfs(gtfs_path)
# 加載 lubridate 包
library(lubridate)
# 讀取巴士班次數據
bus_data <- read.csv("path_to_your_file.txt", header = TRUE, sep = ",")  # 如果是逗號分隔
# 加載 lubridate 包
library(lubridate)
# 加載 dplyr 包
library(dplyr)
# 讀取巴士班次數據
bus_data <- read.csv("frequencies.txt", header = TRUE, sep = ",")  # 如果是逗號分隔
# 查看數據結構
head(bus_data)
# 確保數據包含如下字段
# stop_id, trip_id, arrival_time, stop_sequence
# 轉換到達時間為時間對象
bus_data <- bus_data %>%
mutate(arrival_time = hms(arrival_time))  # 將 HH:MM:SS 格式轉換為時間對象
# 安裝並載入 包
library(lubridate)
library(ggplot2)
# 讀取文件
bus_data <- read.csv("frequencies.txt", header = TRUE, sep = ",")
# 查看數據結構
head(bus_data)
# 轉換 start_time 和 end_time 為時間對象
bus_data <- bus_data %>%
mutate(
start_time = hms(start_time),
end_time = hms(end_time),
headway_mins = headway_secs / 60  # 將 headway_secs 轉換為分鐘
)
# 查看處理後的數據
head(bus_data)
# 提取小時字段
bus_data <- bus_data %>%
mutate(hour = hour(start_time))  # 提取小時部分
# 查看數據
head(bus_data)
# 按小時計算平均等車時間
average_wait_time_by_hour <- bus_data %>%
group_by(hour) %>%
summarise(mean_wait_time = mean(headway_mins, na.rm = TRUE)) %>%
arrange(hour)  # 按小時排序
# 查看結果
print(average_wait_time_by_hour)
# 繪製平均等待時間的折線圖
ggplot(average_wait_time_by_hour, aes(x = hour, y = mean_wait_time)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(
title = "每小時平均等待時間",
x = "小時",
y = "平均等車時間（分鐘）"
) +
theme_minimal()
# 繪製每小時平均等車時間，限制 x 軸範圍並顯示為時間
ggplot(average_wait_time_by_hour, aes(x = hour, y = mean_wait_time)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
scale_x_continuous(
limits = c(0, 23),  # 限制 x 軸範圍為 0 到 23
breaks = 0:23,      # 設置 x 軸刻度為每個小時
labels = sprintf("%02d:00", 0:23)  # 將刻度標籤格式化為時間 (e.g., "00:00", "01:00")
) +
labs(
title = "每小時平均等待時間",
x = "時間（小時）",
y = "平均等車時間（分鐘）"
) +
# 繪製每小時平均等車時間，限制 x 軸範圍並顯示為時間
ggplot(average_wait_time_by_hour, aes(x = hour, y = mean_wait_time)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
scale_x_continuous(
limits = c(0, 23),  # 限制 x 軸範圍為 0 到 23
breaks = 0:23,      # 設置 x 軸刻度為每個小時
labels = sprintf("%02d:00", 0:23)  # 將刻度標籤格式化為時間 (e.g., "00:00", "01:00")
) +
labs(
title = "每小時平均等待時間",
x = "時間（小時）",
y = "平均等車時間（分鐘）"
) +
# 安裝並載入 包
library(lubridate)
# 安裝並載入 包
library(lubridate)
library(ggplot2)
# 讀取文件
bus_data <- read.csv("frequencies.txt", header = TRUE, sep = ",")
# 查看數據結構
head(bus_data)
# 轉換 start_time 和 end_time 為時間對象
bus_data <- bus_data %>%
mutate(
start_time = hms(start_time),
end_time = hms(end_time),
headway_mins = headway_secs / 60  # 將 headway_secs 轉換為分鐘
)
# 查看處理後的數據
head(bus_data)
# 提取小時字段
bus_data <- bus_data %>%
mutate(hour = hour(start_time))  # 提取小時部分
# 查看數據
head(bus_data)
# 按小時計算平均等車時間
average_wait_time_by_hour <- bus_data %>%
group_by(hour) %>%
summarise(mean_wait_time = mean(headway_mins, na.rm = TRUE)) %>%
arrange(hour)  # 按小時排序
# 查看結果
print(average_wait_time_by_hour)
library(ggplot2)
# 繪製折線圖
ggplot(average_wait_time_by_hour, aes(x = hour, y = mean_wait_time)) +
geom_line(color = "blue", size = 1) +  # 添加折線
geom_point(color = "red", size = 2) +  # 添加數據點
scale_x_continuous(
limits = c(0, 23),  # 限制 x 軸範圍
breaks = seq(0, 23, by = 1),  # 設置 x 軸刻度
labels = sprintf("%02d:00", seq(0, 23, by = 1))  # 格式化標籤為時間
) +
labs(
title = "每小時平均等待時間",
x = "時間（小時）",
y = "平均等車時間（分鐘）"
) +
theme_minimal()
